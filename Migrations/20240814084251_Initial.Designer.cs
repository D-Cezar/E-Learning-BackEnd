// <auto-generated />
using System;
using E_Learning.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Learning.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20240814084251_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Learning.DB.Models.CourseSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("TextSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text_source");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("VideoSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("video_source");

                    b.HasKey("Id")
                        .HasName("pk_course_sections");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_course_sections_course_id");

                    b.ToTable("course_sections", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            TextSource = "Configurare initiala pentru dezvoltarea aplicatiilor React.",
                            Title = "Setting Up",
                            VideoSource = "https://www.youtube.com/watch?v=xehoCy7k0DE"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            TextSource = "Bazele JSX: Syntactic sugar pentru JavaScript.",
                            Title = "JSX Basics",
                            VideoSource = "https://www.youtube.com/watch?v=QFaFIcGhPoM"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            TextSource = "Cum sa construim componente si template-uri in React.",
                            Title = "Components & Templates",
                            VideoSource = "https://www.youtube.com/watch?v=XxVg_s8xAms"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 1,
                            TextSource = "Valori dinamice in template-uri React.",
                            Title = "Dynamic Values in Templates",
                            VideoSource = "https://www.youtube.com/watch?v=ftI2bcu_bYk"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 1,
                            TextSource = "Bazele evenimentelor in React.",
                            Title = "Event Basics",
                            VideoSource = "https://www.youtube.com/watch?v=kVeOpcw4GWY"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 1,
                            TextSource = "Utilizarea hook-ului useState pentru state in React.",
                            Title = "React State (useState hook)",
                            VideoSource = "https://www.youtube.com/watch?v=O6P86uwfdR0"
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 1,
                            TextSource = "Introducere in formulare cu React.",
                            Title = "Intro to Forms",
                            VideoSource = "https://www.youtube.com/watch?v=owld54-sf6k"
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 1,
                            TextSource = "Gestionarea formularelor controlate in React.",
                            Title = "Controlled Inputs (forms)",
                            VideoSource = "https://www.youtube.com/watch?v=Pke1S-B0mHM"
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 1,
                            TextSource = "Bazele hook-ului useEffect in React.",
                            Title = "useEffect Hook (the basics)",
                            VideoSource = "https://www.youtube.com/watch?v=ML7FLpaJszk"
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 1,
                            TextSource = "Gestionarea dependentelor in useEffect.",
                            Title = "useEffect Dependencies",
                            VideoSource = "https://www.youtube.com/watch?v=dGcsHMXbSOA"
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 1,
                            TextSource = "Curatarea resurselor cu useEffect.",
                            Title = "Cleaning up with useEffect",
                            VideoSource = "https://www.youtube.com/watch?v=TLr8hdDy7PY"
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 1,
                            TextSource = "Obtinerea datelor cu hook-ul useEffect.",
                            Title = "Fetching Data with useEffect",
                            VideoSource = "https://www.youtube.com/watch?v=jQc_bTFZ5_I"
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 1,
                            TextSource = "Afisarea mesajelor de incarcare conditionate.",
                            Title = "Conditional Loading Message",
                            VideoSource = "https://www.youtube.com/watch?v=CVpUuw9XSjY"
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 1,
                            TextSource = "Gestionarea erorilor la obtinerea datelor.",
                            Title = "Handling Fetch Errors",
                            VideoSource = "https://www.youtube.com/watch?v=Jm6r3nr4ujA"
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 1,
                            TextSource = "Crearea unui hook personalizat in React.",
                            Title = "Making a Custom Hook",
                            VideoSource = "https://www.youtube.com/watch?v=mDYOg_yerxk"
                        },
                        new
                        {
                            Id = 16,
                            CourseId = 1,
                            TextSource = "Reutilizarea hook-urilor personalizate.",
                            Title = "Reusing the Custom Hook",
                            VideoSource = "https://www.youtube.com/watch?v=Rpm3aTpEKIY"
                        },
                        new
                        {
                            Id = 17,
                            CourseId = 1,
                            TextSource = "Utilizarea React Router pentru navigare.",
                            Title = "The React Router",
                            VideoSource = "https://www.youtube.com/watch?v=Law7wfdg_ls"
                        },
                        new
                        {
                            Id = 18,
                            CourseId = 1,
                            TextSource = "Parametrii rutelor in React Router.",
                            Title = "Route Parameters",
                            VideoSource = "https://www.youtube.com/watch?v=7q0SCZPtKmE"
                        },
                        new
                        {
                            Id = 19,
                            CourseId = 1,
                            TextSource = "Utilizarea componentei Link din React Router.",
                            Title = "Link Component",
                            VideoSource = "https://www.youtube.com/watch?v=gg6kYL5KBX4"
                        },
                        new
                        {
                            Id = 20,
                            CourseId = 1,
                            TextSource = "Utilizarea hook-ului useHistory pentru navigare programatica.",
                            Title = "useHistory Hook",
                            VideoSource = "https://www.youtube.com/watch?v=Jh1y-YiXMeE"
                        },
                        new
                        {
                            Id = 21,
                            CourseId = 1,
                            TextSource = "Redirectionari programatice in React.",
                            Title = "Programmatic Redirects",
                            VideoSource = "https://www.youtube.com/watch?v=IxrDUWDnQaA"
                        },
                        new
                        {
                            Id = 22,
                            CourseId = 1,
                            TextSource = "Crearea paginilor 404 si pasii urmatori.",
                            Title = "404 Pages & Next Steps",
                            VideoSource = "https://www.youtube.com/watch?v=nL6XMMBsp2E"
                        });
                });

            modelBuilder.Entity("E_Learning.DB.Models.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageSourse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_sourse");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_courses_author_id");

                    b.ToTable("courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 5,
                            Description = "A comprehensive course on React, covering all the essential topics for web development.",
                            ImageSourse = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQcR5U16C8yXgBpl7-Bc7Itjx3_LRl425zINA&s",
                            Title = "Full React Course",
                            Type = "Web Development"
                        });
                });

            modelBuilder.Entity("E_Learning.DB.Models.CoursesUsers", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<TimeSpan?>("ActiveTime")
                        .HasColumnType("time")
                        .HasColumnName("active_time");

                    b.Property<string>("CompletedSectionIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("completed_section_ids");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enroll_date");

                    b.HasKey("UserId", "CourseId")
                        .HasName("pk_courses_users");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_courses_users_course_id");

                    b.ToTable("courses_users", (string)null);
                });

            modelBuilder.Entity("E_Learning.DB.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hint");

                    b.Property<int>("SectionCourseId")
                        .HasColumnType("int")
                        .HasColumnName("section_course_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("SectionCourseId")
                        .HasDatabaseName("ix_questions_section_course_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("E_Learning.DB.Models.UserAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnswerTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("answer_time");

                    b.Property<string>("GivenAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("given_answer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_user_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_answers_user_id");

                    b.ToTable("user_answers", (string)null);
                });

            modelBuilder.Entity("E_Learning.DB.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "$2a$11$P7Fhr973nNxLlpf1yWpsP.U2QjW90lKtcJndsjH3tgBXrLFDrqmAC",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "$2a$11$Z6qAsCFBaQE9q9klH0ltgu.pWHmJdKdr2FC/rAJ6HN6Iu9cqnJMfm",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "robert.brown@example.com",
                            FirstName = "Robert",
                            LastName = "Brown",
                            Password = "$2a$11$M65LfuqxWHrRQgZcbt2lTeeOMXtm81IjdY.fyFqu7H0okebvQcYWC",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "emily.clark@example.com",
                            FirstName = "Emily",
                            LastName = "Clark",
                            Password = "$2a$11$/AvJn5uJm8NntaptoeBo0uGB/i3HuTBLp75xfs0ScaVcGEWmYdI4W",
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            Email = "netninja@example.com",
                            FirstName = "Net",
                            LastName = "Ninja",
                            Password = "$2a$11$PSder3iXoPUKb9N5PoDSFOOd9r5oX2LAFe99EWIboH2PVNwOEVAii",
                            Role = 1
                        });
                });

            modelBuilder.Entity("E_Learning.DB.Models.CourseSections", b =>
                {
                    b.HasOne("E_Learning.DB.Models.Courses", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_sections_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("E_Learning.DB.Models.Courses", b =>
                {
                    b.HasOne("E_Learning.DB.Models.Users", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_users_author_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("E_Learning.DB.Models.CoursesUsers", b =>
                {
                    b.HasOne("E_Learning.DB.Models.Courses", "Course")
                        .WithMany("CoursesUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_courses_users_courses_course_id");

                    b.HasOne("E_Learning.DB.Models.Users", "User")
                        .WithMany("CoursesUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_courses_users_users_user_id");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Learning.DB.Models.Questions", b =>
                {
                    b.HasOne("E_Learning.DB.Models.CourseSections", "SectionCourse")
                        .WithMany("Questions")
                        .HasForeignKey("SectionCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_course_sections_section_course_id");

                    b.Navigation("SectionCourse");
                });

            modelBuilder.Entity("E_Learning.DB.Models.UserAnswers", b =>
                {
                    b.HasOne("E_Learning.DB.Models.Questions", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_answers_questions_question_id");

                    b.HasOne("E_Learning.DB.Models.Users", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_answers_users_user_id");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Learning.DB.Models.CourseSections", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("E_Learning.DB.Models.Courses", b =>
                {
                    b.Navigation("CoursesUsers");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("E_Learning.DB.Models.Questions", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("E_Learning.DB.Models.Users", b =>
                {
                    b.Navigation("CoursesUsers");

                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
